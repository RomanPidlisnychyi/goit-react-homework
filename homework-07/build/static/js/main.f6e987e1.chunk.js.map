{"version":3,"sources":["redux/phoneBook/phoneBookActions.js","redux/phoneBook/phoneBookSelectors.js","components/Layout/styles.js","components/Layout/Layout.js","components/ContactForm/styles.js","redux/phoneBook/phoneBookOperations.js","components/ContactForm/ContactForm.js","components/Filter/styles.js","components/Filter/Filter.js","components/ContactListItem/styles.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","components/styles.js","components/App.js","redux/phoneBook/phoneBookReducer.js","redux/store.js","index.js"],"names":["createContactRequest","createAction","createContactSuccess","createContactFailed","createContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactRequest","removeContactSuccess","removeContactError","togglerFlag","filter","getContacts","state","items","getFilter","getFiltredContacts","createSelector","contacts","item","name","toLowerCase","includes","getIsNameAlreadyExist","isNameAlreadyExist","getContactById","contactId","find","contact","id","styled","div","Layout","children","Form","form","Title","p","Input","input","Button","button","baseURL","dispatch","phoneBookActions","fetch","then","response","json","data","catch","error","setContact","number","getState","phoneBookSelectors","options","method","headers","body","JSON","stringify","Date","now","deleteContact","ContactForm","handlerInput","e","target","value","setState","handlerSubmit","preventDefault","props","postContact","this","avalibleContact","onSubmit","type","onChange","disabled","Component","mapDispatchToProps","phoneBookOperations","connect","Container","FilterInput","onFilter","filterValue","length","Li","li","Span","span","ownProps","removeContact","onClick","ContactList","TransitionGroup","component","in","map","CSSTransition","key","classNames","timeout","ContactListContainer","fetchContacts","h2","InfoMessage","setTimeout","appear","unmountOnExit","createReducer","action","payload","loading","combineReducers","store","configureStore","reducer","phoneBookReduser","ReactDOM","render","document","querySelector"],"mappings":"yQAkBe,GACXA,qBAjByBC,YAAa,0BAkBtCC,qBAjByBD,YAAa,0BAkBtCE,oBAjBwBF,YAAa,yBAkBrCG,mBAjBuBH,YAAa,wBAkBpCI,qBAhByBJ,YAAa,yBAiBtCK,qBAhByBL,YAAa,yBAiBtCM,mBAhBuBN,YAAa,uBAiBpCO,qBAfyBP,YAAa,0BAgBtCQ,qBAfyBR,YAAa,0BAgBtCS,mBAfuBT,YAAa,wBAgBpCU,YAdgBV,YAAa,eAe7BW,OAdWX,YAAa,W,OCdtBY,EAAc,SAAAC,GAAK,OAAIA,EAAMC,OAC7BC,EAAY,SAAAF,GAAK,OAAIA,EAAMF,QAG3BK,EAAqBC,YACvB,CAACL,EAAaG,IACd,SAACG,EAAUP,GAAX,OACIO,EAASP,QAAO,SAAAQ,GAAI,OAChBA,EAAKC,KAAKC,cAAcC,SAASX,EAAOU,qBASrC,GACXT,cACAG,YACAQ,sBAlB0B,SAAAV,GAAK,OAAIA,EAAMW,oBAmBzCR,qBACAS,eAVmBR,YACnB,CAAC,SAACJ,EAAOa,GAAR,OAAsBA,GAAWV,IAClC,SAACU,EAAWR,GAAZ,OAAyBA,EAASS,MAAK,SAAAC,GAAO,OAAIA,EAAQC,KAAOH,S,iICdtDI,UAAOC,IAAtB,KCEe,SAASC,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SAC7B,OAAO,kBAAC,EAAD,KAAYA,G,6lCCHvB,IAAMC,EAAOJ,IAAOK,KAAV,KAMJC,EAAQN,IAAOO,EAAV,KAKLC,EAAQR,IAAOS,MAAV,KAaLC,EAASV,IAAOW,OAAV,KCvBNC,EACF,4EAsDW,GAAE9B,YApDG,kBAAM,SAAA+B,GACtBA,EAASC,EAAiBxC,wBAE1ByC,MAAM,GAAD,OAAIH,EAAJ,cACAI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIN,EAASC,EAAiBvC,qBAAqB4C,OAC5DC,OAAM,SAAAC,GAAK,OAAIR,EAASC,EAAiBtC,mBAAmB6C,SA8CvCC,WA3CX,SAAChC,EAAMiC,GAAP,OAAkB,SAACV,EAAUW,GAO5C,GANAX,EAASC,EAAiB7C,wBAETwD,EAAmB3C,YAAY0C,KAEhB3B,MAAK,SAAAC,GAAO,OAAIA,EAAQR,OAASA,KAK7D,OAFAuB,EAASC,EAAiBlC,oBAC1BiC,EAASC,EAAiB1C,uBAI9B,IAAMsD,EAAU,CACZC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEzC,OAAMiC,SAAQxB,GAAIiC,KAAKC,SAGlDlB,MAAM,GAAD,OAAIH,EAAJ,aAAwBc,GACxBV,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIN,EAASC,EAAiB3C,qBAAqBgD,OAC5DC,OAAM,SAAAC,GAAK,OAAIR,EAASC,EAAiBzC,mBAAmBgD,SAmB3Ba,cAhBpB,SAAAnC,GAAE,OAAI,SAAAc,GACxBA,EAASC,EAAiBrC,wBAS1BsC,MAAM,GAAD,OAAIH,EAAJ,qBAAwBb,GAPb,CACZ4B,OAAQ,SACRC,QAAS,CACL,eAAgB,sBAKnBZ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,kBAAMH,EAASC,EAAiBpC,qBAAqBqB,OAC1DqB,OAAM,SAAAC,GAAK,OAAIR,EAASC,EAAiBnC,mBAAmB0C,UCjD/Dc,E,4MAKFpD,MAAQ,CACJO,KAAM,GACNiC,OAAQ,I,EAGZa,aAAe,SAAAC,GAAM,IAAD,EACQA,EAAEC,OAAlBhD,EADQ,EACRA,KAAMiD,EADE,EACFA,MACd,EAAKC,SAAL,eAAiBlD,EAAOiD,K,EAG5BE,cAAgB,SAAAJ,GACZA,EAAEK,iBADe,MAEQ,EAAK3D,MAAtBO,EAFS,EAETA,KAAMiC,EAFG,EAEHA,OACd,EAAKoB,MAAMC,YAAYtD,EAAMiC,GAC7B,EAAKiB,SAAS,CAAElD,KAAM,GAAIiC,OAAQ,M,uDAG5B,IAAD,EACoBsB,KAAK9D,MAAtBO,EADH,EACGA,KAAMiC,EADT,EACSA,OACRuB,EAA2B,KAATxD,GAA0B,KAAXiC,EAEvC,OACI,kBAACnB,EAAD,CAAM2C,SAAUF,KAAKJ,eACjB,kBAACnC,EAAD,aACA,kBAACE,EAAD,CACIwC,KAAK,OACLT,MAAOjD,EACPA,KAAK,OACL2D,SAAUJ,KAAKT,eAEnB,kBAAC9B,EAAD,eACA,kBAACE,EAAD,CACIwC,KAAK,OACLT,MAAOhB,EACPjC,KAAK,SACL2D,SAAUJ,KAAKT,eAEnB,6BACA,kBAAC1B,EAAD,CAAQsC,KAAK,SAASE,UAAWJ,GAAjC,oB,GA3CUK,aAmDpBC,EAAqB,CACvBR,YAAaS,EAAoB/B,YAGtBgC,cAAQ,KAAMF,EAAdE,CAAkCnB,G,sPC1DjD,IAAMoB,EAAYvD,IAAOC,IAAV,KAMTuD,EAAcxD,YAAOQ,EAAPR,CAAH,KCiCXoD,EAAqB,CACvBK,SAAU3C,EAAiBjC,QAGhByE,eATS,SAAAvE,GAAK,MAAK,CAC9B2E,YAAajC,EAAmBxC,UAAUF,GAC1CC,MAAOyC,EAAmB3C,YAAYC,MAOFqE,EAAzBE,EAtCA,SAAC,GAAsC,IAApCI,EAAmC,EAAnCA,YAAa1E,EAAsB,EAAtBA,MAAOyE,EAAe,EAAfA,SAElC,OACIzE,EAAM2E,OAAS,GACX,kBAACJ,EAAD,KACI,kBAACjD,EAAD,8BACA,kBAACkD,EAAD,CACIR,KAAK,OACLT,MAAOmB,EACPpE,KAAK,SACL2D,SATM,SAAAZ,GAAC,OAAIoB,EAASpB,EAAEC,OAAOC,c,m6BCPjD,IAAMqB,EAAK5D,IAAO6D,GAAV,KASFnD,EAASV,IAAOW,OAAV,KAyBNmD,EAAO9D,IAAO+D,KAAV,KCHKT,eATS,SAACvE,EAAOiF,GAAR,sBACjBvC,EAAmB9B,eAAeZ,EAAOiF,EAASjE,QAG9B,SAACc,EAAUmD,GAAX,MAAyB,CAChDC,cAAe,kBACXpD,EAASwC,EAAoBnB,cAAc8B,EAASjE,SAG7CuD,EA1BS,SAAC,GAAD,IAAGhE,EAAH,EAAGA,KAAMiC,EAAT,EAASA,OAAQ0C,EAAjB,EAAiBA,cAAjB,OACpB,kBAACL,EAAD,KACI,8BAAOtE,GACP,kBAACwE,EAAD,KACKvC,EACD,kBAAC,EAAD,CAAQyB,KAAK,SAASkB,QAASD,SCoB5BE,OA3Bf,YAAiC,IAAVnF,EAAS,EAATA,MACnB,OACI,kBAACoF,EAAA,EAAD,CAAiBC,UAAU,KAAKC,GAAItF,EAAM2E,QACrC3E,EAAMuF,KAAI,gBAAGxE,EAAH,EAAGA,GAAH,OACP,kBAACyE,EAAA,EAAD,CACIC,IAAK1E,EACL2E,WAAW,mBACXC,QAAS,KAET,kBAAC,EAAD,CAAiB5E,GAAIA,UCRnC6E,G,kLAEE/B,KAAKF,MAAMkC,kB,+BAIX,OAAO,kBAAC,GAAgBhC,KAAKF,W,GANFQ,aAcpBG,gBAJS,SAAAvE,GAAK,MAAK,CAC9BC,MAAOyC,EAAmBvC,mBAAmBH,MAGT,CACpC8F,cAAexB,EAAoBvE,aADxBwE,CAEZsB,I,kXCpBH,I,MAAMtE,GAAQN,IAAO8E,GAAV,MAKLC,GAAc/E,IAAOC,IAAV,MCkCXmD,GAAqB,CACvBxE,YAAakC,EAAiBlC,aAGnB0E,gBARS,SAAAvE,GAAK,MAAK,CAC9BW,mBAAoB+B,EAAmBhC,sBAAsBV,MAOzBqE,GAAzBE,EAlCH,SAAC,GAAyC,IAAvC5D,EAAsC,EAAtCA,mBAAoBd,EAAkB,EAAlBA,YAM/B,OALIc,GACAsF,YAAW,WACPpG,MACD,KAGH,kBAACsB,EAAD,KACI,kBAACsE,EAAA,EAAD,CAAeF,IAAE,EAACW,QAAM,EAACP,WAAW,aAAaC,QAAS,KACtD,kBAAC,GAAD,mBAEJ,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,GAAD,MACA,kBAACH,EAAA,EAAD,CACIF,GAAI5E,EACJgF,WAAW,mBACXC,QAAS,IACTO,eAAa,GAEb,kBAACH,GAAD,qC,iBC3BV/F,GAAQmG,YAAc,IAAD,qBACtBrE,EAAiBvC,sBAAuB,SAACQ,EAAOqG,GAAR,OAAmBA,EAAOC,WAD5C,eAEtBvE,EAAiB3C,sBAAuB,SAACY,EAAOqG,GAAR,6BAClCrG,GADkC,CAErCqG,EAAOC,aAJY,eAMtBvE,EAAiBpC,sBAAuB,SAACK,EAAOqG,GAAR,OACrCrG,EAAMF,QAAO,SAAAiB,GAAO,OAAIA,EAAQC,KAAOqF,EAAOC,cAP3B,KAUrB3F,GAAqByF,aAAc,EAAD,eACnCrE,EAAiBlC,aAAc,SAACG,EAAOqG,GAAR,OAAoBrG,MAGlDF,GAASsG,YAAc,GAAD,eACvBrE,EAAiBjC,QAAS,SAACE,EAAOqG,GAAR,OAAmBA,EAAOC,YAGnDC,GAAUH,aAAc,GAAD,qBACxBrE,EAAiBxC,sBAAuB,kBAAM,KADtB,eAExBwC,EAAiBvC,sBAAuB,kBAAM,KAFtB,eAGxBuC,EAAiBtC,oBAAqB,kBAAM,KAHpB,eAIxBsC,EAAiB7C,sBAAuB,kBAAM,KAJtB,eAKxB6C,EAAiB3C,sBAAuB,kBAAM,KALtB,eAMxB2C,EAAiB1C,qBAAsB,kBAAM,KANrB,eAOxB0C,EAAiBzC,oBAAqB,kBAAM,KAPpB,eAQxByC,EAAiBrC,sBAAuB,kBAAM,KARtB,eASxBqC,EAAiBpC,sBAAuB,kBAAM,KATtB,eAUxBoC,EAAiBnC,oBAAqB,kBAAM,KAVpB,KAad4G,gBAAgB,CAC3BvG,SACAH,UACAa,sBACA4F,aChCWE,GAJDC,YAAe,CACzBC,QAASC,K,YCIbC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,IACb,kBAAC,GAAD,OAEJM,SAASC,cAAc,Y","file":"static/js/main.f6e987e1.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nconst createContactRequest = createAction('CREATE_CONTACT_REQUEST');\nconst createContactSuccess = createAction('CREATE_CONTACT_SUCCESS');\nconst createContactFailed = createAction('CREATE_CONTACT_FAILED');\nconst createContactError = createAction('CREATE_CONTACT_ERROR');\n\nconst fetchContactsRequest = createAction('FETCH_CONTACT_REQUEST');\nconst fetchContactsSuccess = createAction('FETCH_CONTACT_SUCCESS');\nconst fetchContactsError = createAction('FETCH_CONTACT_ERROR');\n\nconst removeContactRequest = createAction('REMOVE_CONTACT_REQUEST');\nconst removeContactSuccess = createAction('REMOVE_CONTACT_SUCCESS');\nconst removeContactError = createAction('REMOVE_CONTACT_ERROR');\n\nconst togglerFlag = createAction('CHANGE_FLAG');\nconst filter = createAction('FILTER');\n\nexport default {\n    createContactRequest,\n    createContactSuccess,\n    createContactFailed,\n    createContactError,\n    fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n    removeContactRequest,\n    removeContactSuccess,\n    removeContactError,\n    togglerFlag,\n    filter,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getContacts = state => state.items;\nconst getFilter = state => state.filter;\nconst getIsNameAlreadyExist = state => state.isNameAlreadyExist;\n\nconst getFiltredContacts = createSelector(\n    [getContacts, getFilter],\n    (contacts, filter) =>\n        contacts.filter(item =>\n            item.name.toLowerCase().includes(filter.toLowerCase()),\n        ),\n);\n\nconst getContactById = createSelector(\n    [(state, contactId) => contactId, getFiltredContacts],\n    (contactId, contacts) => contacts.find(contact => contact.id === contactId),\n);\n\nexport default {\n    getContacts,\n    getFilter,\n    getIsNameAlreadyExist,\n    getFiltredContacts,\n    getContactById,\n};\n","import styled from 'styled-components';\n\nexport default styled.div`\n    width: 400px;\n    position: relative;\n`;\n","import React from 'react';\nimport Container from './styles';\nimport PropTypes from 'prop-types';\n\nexport default function Layout({ children }) {\n    return <Container>{children}</Container>;\n}\n\nLayout.propTypes = {\n    children: PropTypes.array,\n};\n","import styled from 'styled-components';\n\nconst Form = styled.form`\n    box-shadow: 1px 1px 3px grey;\n    padding: 10px;\n    margin-bottom: 20px;\n`;\n\nconst Title = styled.p`\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n        Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n`;\n\nconst Input = styled.input`\n    margin-bottom: 10px;\n    padding: 5px;\n    width: 100%;\n    border: 1px solid grey;\n    border-radius: 3px;\n    &:active,\n    :focus {\n        outline: none;\n        border-color: #3645ac;\n    }\n`;\n\nconst Button = styled.button`\n    outline: none;\n    padding: 5px;\n    border: 1px solid transparent;\n    color: #fff;\n    background-color: #3645ac;\n    border-radius: 3px;\n    box-shadow: 1px 1px 3px #3645ac;\n    width: 100%;\n    &:hover {\n        cursor: pointer;\n        background-color: #243398;\n    }\n    &:disabled {\n        background-color: grey;\n    }\n`;\n\nexport { Form, Title, Input, Button };\n","import phoneBookActions from './phoneBookActions';\nimport phoneBookSelectors from './phoneBookSelectors';\n\nconst baseURL =\n    'https://my-json-server.typicode.com/RomanPidlisnychyi/goit-react-homework';\n\nconst getContacts = () => dispatch => {\n    dispatch(phoneBookActions.fetchContactsRequest());\n\n    fetch(`${baseURL}/contacts`)\n        .then(response => response.json())\n        .then(data => dispatch(phoneBookActions.fetchContactsSuccess(data)))\n        .catch(error => dispatch(phoneBookActions.fetchContactsError(error)));\n};\n\nconst setContact = (name, number) => (dispatch, getState) => {\n    dispatch(phoneBookActions.createContactRequest());\n\n    const contacts = phoneBookSelectors.getContacts(getState());\n\n    const isContactExist = contacts.find(contact => contact.name === name);\n\n    if (isContactExist) {\n        dispatch(phoneBookActions.togglerFlag());\n        dispatch(phoneBookActions.createContactFailed());\n        return;\n    }\n\n    const options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, number, id: Date.now() }),\n    };\n\n    fetch(`${baseURL}/contacts`, options)\n        .then(response => response.json())\n        .then(data => dispatch(phoneBookActions.createContactSuccess(data)))\n        .catch(error => dispatch(phoneBookActions.createContactError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n    dispatch(phoneBookActions.removeContactRequest());\n\n    const options = {\n        method: 'DELETE',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n\n    fetch(`${baseURL}/contacts/${id}`, options)\n        .then(response => response.json())\n        .then(() => dispatch(phoneBookActions.removeContactSuccess(id)))\n        .catch(error => dispatch(phoneBookActions.removeContactError(error)));\n};\n\nexport default { getContacts, setContact, deleteContact };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Title, Input, Button } from './styles';\nimport PropTypes from 'prop-types';\nimport phoneBookOperations from '../../redux/phoneBook/phoneBookOperations';\n\nclass ContactForm extends Component {\n    static propTypes = {\n        postContact: PropTypes.func,\n    };\n\n    state = {\n        name: '',\n        number: '',\n    };\n\n    handlerInput = e => {\n        const { name, value } = e.target;\n        this.setState({ [name]: value });\n    };\n\n    handlerSubmit = e => {\n        e.preventDefault();\n        const { name, number } = this.state;\n        this.props.postContact(name, number);\n        this.setState({ name: '', number: '' });\n    };\n\n    render() {\n        const { name, number } = this.state;\n        const avalibleContact = name !== '' && number !== '';\n\n        return (\n            <Form onSubmit={this.handlerSubmit}>\n                <Title>Name</Title>\n                <Input\n                    type=\"text\"\n                    value={name}\n                    name=\"name\"\n                    onChange={this.handlerInput}\n                />\n                <Title>Number</Title>\n                <Input\n                    type=\"text\"\n                    value={number}\n                    name=\"number\"\n                    onChange={this.handlerInput}\n                />\n                <br />\n                <Button type=\"submit\" disabled={!avalibleContact}>\n                    Add contact\n                </Button>\n            </Form>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    postContact: phoneBookOperations.setContact,\n};\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import { Input } from '../ContactForm/styles';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    box-shadow: 1px 1px 3px grey;\n    padding: 10px;\n    margin-bottom: 20px;\n`;\n\nconst FilterInput = styled(Input)`\n    margin-bottom: 0;\n`;\n\nexport { Container, FilterInput };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport phoneBookActions from '../../redux/phoneBook/phoneBookActions';\nimport phoneBookSelectors from '../../redux/phoneBook/phoneBookSelectors';\nimport { Title } from '../ContactForm/styles';\nimport { Container, FilterInput } from './styles';\n\nconst Filter = ({ filterValue, items, onFilter }) => {\n    const handlerFilter = e => onFilter(e.target.value);\n    return (\n        items.length > 1 && (\n            <Container>\n                <Title>Find contacts by name</Title>\n                <FilterInput\n                    type=\"text\"\n                    value={filterValue}\n                    name=\"filter\"\n                    onChange={handlerFilter}\n                />\n            </Container>\n        )\n    );\n};\n\nFilter.propTypes = {\n    onFilter: PropTypes.func.isRequired,\n    filterValue: PropTypes.string,\n    items: PropTypes.arrayOf(\n        PropTypes.exact({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }).isRequired,\n    ),\n};\n\nconst mapStateToProps = state => ({\n    filterValue: phoneBookSelectors.getFilter(state),\n    items: phoneBookSelectors.getContacts(state),\n});\n\nconst mapDispatchToProps = {\n    onFilter: phoneBookActions.filter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import styled from 'styled-components';\n\nconst Li = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 10px 0;\n    padding: 10px;\n    box-shadow: 1px 1px 3px grey;\n`;\n\nconst Button = styled.button`\n    position: relative;\n    margin-left: 10px;\n    color: #fff;\n    font-size: 25px;\n    width: 25px;\n    height: 25px;\n    outline: none;\n    padding: 0 5px;\n    border: none;\n    border-radius: 5px;\n    background-color: #f1392d;\n    &:hover {\n        cursor: pointer;\n        background-color: #b2261b;\n    }\n    &::before {\n        content: '+';\n        position: absolute;\n        top: 55%;\n        left: 0;\n        transform: rotate(45deg) translate(-50%, -50%);\n    }\n`;\n\nconst Span = styled.span`\n    display: flex;\n    align-items: center;\n`;\n\nexport { Li, Button, Span };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport phoneBookOperations from '../../redux/phoneBook/phoneBookOperations';\nimport phoneBookSelectors from '../../redux/phoneBook/phoneBookSelectors';\nimport { Li, Button, Span } from './styles';\nimport PropTypes from 'prop-types';\n\nconst ContactListItem = ({ name, number, removeContact }) => (\n    <Li>\n        <span>{name}</span>\n        <Span>\n            {number}\n            <Button type=\"button\" onClick={removeContact} />\n        </Span>\n    </Li>\n);\n\nContactListItem.propTypes = {\n    id: PropTypes.number,\n    name: PropTypes.string,\n    number: PropTypes.string,\n    removeContact: PropTypes.func,\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    ...phoneBookSelectors.getContactById(state, ownProps.id),\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    removeContact: () =>\n        dispatch(phoneBookOperations.deleteContact(ownProps.id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\n","import React from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport PropTypes from 'prop-types';\n\nfunction ContactList({ items }) {\n    return (\n        <TransitionGroup component=\"ul\" in={items.length}>\n            {items.map(({ id }) => (\n                <CSSTransition\n                    key={id}\n                    classNames=\"ContactList-fade\"\n                    timeout={250}\n                >\n                    <ContactListItem id={id} />\n                </CSSTransition>\n            ))}\n        </TransitionGroup>\n    );\n}\n\nContactList.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.exact({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }).isRequired,\n    ),\n    filter: PropTypes.string,\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport phoneBookSelectors from '../../redux/phoneBook/phoneBookSelectors';\nimport phoneBookOperations from '../../redux/phoneBook/phoneBookOperations';\nimport ContactList from './ContactList';\n\nclass ContactListContainer extends Component {\n    componentDidMount() {\n        this.props.fetchContacts();\n    }\n\n    render() {\n        return <ContactList {...this.props} />;\n    }\n}\n\nconst mapStateToProps = state => ({\n    items: phoneBookSelectors.getFiltredContacts(state),\n});\n\nexport default connect(mapStateToProps, {\n    fetchContacts: phoneBookOperations.getContacts,\n})(ContactListContainer);\n","import styled from 'styled-components';\n\nconst Title = styled.h2`\n    margin: 15px 0;\n    color: #3446ac;\n`;\n\nconst InfoMessage = styled.div`\n    position: absolute;\n    top: 12px;\n    right: -30px;\n    padding: 10px 50px;\n    font-size: 12px;\n    border-radius: 5px;\n    color: #fff;\n    background-color: #f1392d;\n`;\n\nexport { Title, InfoMessage };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport phoneBookActions from '../redux/phoneBook/phoneBookActions';\nimport phoneBookSelectors from '../redux/phoneBook/phoneBookSelectors';\nimport Layout from './Layout';\nimport ContactForm from './ContactForm/ContactForm';\nimport Filter from './Filter/Filter';\nimport ContactList from './ContactList/ContactListContainer';\nimport { Title, InfoMessage } from './styles';\n\nconst App = ({ isNameAlreadyExist, togglerFlag }) => {\n    if (isNameAlreadyExist) {\n        setTimeout(() => {\n            togglerFlag();\n        }, 2000);\n    }\n    return (\n        <Layout>\n            <CSSTransition in appear classNames=\"Title-fade\" timeout={500}>\n                <Title>Phonebook</Title>\n            </CSSTransition>\n            <ContactForm />\n            <Filter />\n            <ContactList />\n            <CSSTransition\n                in={isNameAlreadyExist}\n                classNames=\"InfoMessage-fade\"\n                timeout={250}\n                unmountOnExit\n            >\n                <InfoMessage>Contact already exists!</InfoMessage>\n            </CSSTransition>\n        </Layout>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isNameAlreadyExist: phoneBookSelectors.getIsNameAlreadyExist(state),\n});\n\nconst mapDispatchToProps = {\n    togglerFlag: phoneBookActions.togglerFlag,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport phoneBookActions from './phoneBookActions';\n\nconst items = createReducer([], {\n    [phoneBookActions.fetchContactsSuccess]: (state, action) => action.payload,\n    [phoneBookActions.createContactSuccess]: (state, action) => [\n        ...state,\n        action.payload,\n    ],\n    [phoneBookActions.removeContactSuccess]: (state, action) =>\n        state.filter(contact => contact.id !== action.payload),\n});\n\nconst isNameAlreadyExist = createReducer(false, {\n    [phoneBookActions.togglerFlag]: (state, action) => !state,\n});\n\nconst filter = createReducer('', {\n    [phoneBookActions.filter]: (state, action) => action.payload,\n});\n\nconst loading = createReducer(false, {\n    [phoneBookActions.fetchContactsRequest]: () => true,\n    [phoneBookActions.fetchContactsSuccess]: () => false,\n    [phoneBookActions.fetchContactsError]: () => false,\n    [phoneBookActions.createContactRequest]: () => true,\n    [phoneBookActions.createContactSuccess]: () => false,\n    [phoneBookActions.createContactFailed]: () => false,\n    [phoneBookActions.createContactError]: () => false,\n    [phoneBookActions.removeContactRequest]: () => true,\n    [phoneBookActions.removeContactSuccess]: () => false,\n    [phoneBookActions.removeContactError]: () => false,\n});\n\nexport default combineReducers({\n    items,\n    filter,\n    isNameAlreadyExist,\n    loading,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport phoneBookReduser from './phoneBook/phoneBookReducer';\n\nconst store = configureStore({\n    reducer: phoneBookReduser,\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './redux/store';\nimport './base.css';\nimport './styles.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root'),\n);\n"],"sourceRoot":""}